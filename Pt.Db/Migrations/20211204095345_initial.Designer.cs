// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectTracker.Db;

#nullable disable

namespace ProjectTracker.Db.Migrations
{
    [DbContext(typeof(PtDbContext))]
    [Migration("20211204095345_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pt.Db.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Pt.Db.Entities.WorkedOnDay", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("Day")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Hours")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("ProjectId", "Day");

                    b.ToTable("WorkedOnDays");
                });

            modelBuilder.Entity("Pt.Db.Entities.WorkedOnDay", b =>
                {
                    b.HasOne("Pt.Db.Entities.Project", "ProjectLink")
                        .WithMany("WorkedOnDays")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectLink");
                });

            modelBuilder.Entity("Pt.Db.Entities.Project", b =>
                {
                    b.Navigation("WorkedOnDays");
                });
#pragma warning restore 612, 618
        }
    }
}
